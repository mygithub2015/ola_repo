package com.ola.mtracks.controllers;

import java.text.ParseException;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ola.mtracks.dto.PlaylistDto;
import com.ola.mtracks.models.Playlist;
import com.ola.mtracks.service.IPlaylistService;

@RestController
@RequestMapping("playlist")
public class PlaylistController {
	
	@Autowired
	private IPlaylistService playlistService;
	@Autowired
	private ModelMapper modelMapper;
	
	@PostMapping("/add")
	public PlaylistDto addPlaylist(@RequestBody PlaylistDto playlistDto) throws ParseException {
		Playlist playlist = convertToEntity(playlistDto);
		Playlist createdPlaylist = this.playlistService.addPlaylist(playlist);
		return convertToDto(createdPlaylist);
	}
	
	@GetMapping("/get/{playlistId")
	public PlaylistDto retrievePlaylist(@PathVariable Long playlistId) {
		Playlist fetchedPlaylist = this.playlistService.getPlaylist(playlistId);
		return convertToDto(fetchedPlaylist);
	}
	
	@PutMapping("/update")
	public PlaylistDto updatePlaylist(@RequestBody Playlist playlist) {
		Playlist updatedDto = this.playlistService.updatePlaylist(playlist);
		return convertToDto(updatedDto);
	}
	
	@DeleteMapping("/delete/{playlistId}")
	public String deletePlaylist(@PathVariable Long playlistId) {
		this.playlistService.deletePlaylist(playlistId);
		return "Playlist with id: "+playlistId+" got deleted successfully!";

	}
	
	@GetMapping("/get/tags/{tagsId}")
	public PlaylistDto findPlaylistByTags(@PathVariable Long tagsId) {
		Playlist fetchedPlaylist = this.playlistService.getPlaylistByTagId(tagsId);
		return convertToDto(fetchedPlaylist);
	}
	
	private PlaylistDto convertToDto(Playlist playlist) {
		PlaylistDto playlistDto = modelMapper.map(playlist, PlaylistDto.class);
	    //tagsDto.setGenre(tags.getGenre().getGenre());
	    return playlistDto;
	}
	
	private Playlist convertToEntity(PlaylistDto playlistDto) throws ParseException {
		Playlist playlist = modelMapper.map(playlistDto, Playlist.class);
	   // tags.setGenre(Genre.valueOf(tagsDto.getGenre()));
	    return playlist;
	}

}
